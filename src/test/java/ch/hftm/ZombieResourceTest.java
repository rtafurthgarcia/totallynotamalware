package ch.hftm;

import io.quarkus.test.junit.QuarkusTest;
import io.restassured.http.ContentType;
import jakarta.inject.Inject;

import org.bson.types.ObjectId;
import org.junit.jupiter.api.Test;

import ch.hftm.controls.ZombieService;
import ch.hftm.controls.dto.ZombieDto;
import ch.hftm.controls.dto.ZombieMapper;
import ch.hftm.controls.dto.ZombieDto.GetZombieDto;
import ch.hftm.controls.dto.ZombieDto.NewZombieDto;
import ch.hftm.controls.dto.ZombieDto.UpdateZombieDto;
import ch.hftm.entities.Zombie;

import static io.restassured.RestAssured.given;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import jakarta.json.bind.Jsonb;
import jakarta.json.bind.JsonbBuilder;

@QuarkusTest
public class ZombieResourceTest {
    @Inject
    ZombieService ZombieService;

    @Inject
    ZombieMapper ZombieMapper;

    Jsonb jsonb = JsonbBuilder.create();

    @Test
    public void testGetAllZombies() throws UnknownHostException {
        // Creating the first Zombie instance
        Zombie Zombie1 = new Zombie();
        Zombie1.id = new ObjectId();
        Zombie1.macAddress = "00:11:22:33:44:55";
        Zombie1.ipAddress = InetAddress.getLoopbackAddress().getHostAddress();
        Zombie1.os = "Windows";
        Zombie1.runningWithPrivileges = true;

        // Hard drives with free space
        Map<String, Integer> harddrives1 = new HashMap<String, Integer>();
        harddrives1.put("C:", 500);
        harddrives1.put("D:", 300);
        Zombie1.harddrivesWithFreeSpace = harddrives1;

        Zombie1.freeRam = 4096;
        Zombie1.usedRam = 2048;
        Zombie1.cpuName = "Intel Core i5";
        Zombie1.userRunning = "John Doe";
        Zombie1.buildRunning = 123;
        Zombie1.lastActivity = LocalDateTime.now();

        ZombieService.setZombie(Zombie1);

        List<GetZombieDto> Zombies = jsonb.fromJson(given()
            .when()
            .get("/api/v1/Zombies")
            .then()
            .statusCode(200)
            .and()
            .extract()
            .asString(),
            new ArrayList<GetZombieDto>() {
            }.getClass().getGenericSuperclass());

        assertTrue(Zombies.size() > 0);
    }

    @Test
    public void testGetZombieById() throws UnknownHostException {
        // Creating the first Zombie instance
        Zombie Zombie1 = new Zombie();
        Zombie1.id = new ObjectId();
        Zombie1.macAddress = "00:11:22:33:44:55";
        Zombie1.ipAddress = InetAddress.getLoopbackAddress().getHostAddress();
        Zombie1.os = "Windows";
        Zombie1.runningWithPrivileges = true;

        // Hard drives with free space
        Map<String, Integer> harddrives1 = new HashMap<String, Integer>();
        harddrives1.put("C:", 500);
        harddrives1.put("D:", 300);
        Zombie1.harddrivesWithFreeSpace = harddrives1;

        Zombie1.freeRam = 4096;
        Zombie1.usedRam = 2048;
        Zombie1.cpuName = "Intel Core i5";
        Zombie1.userRunning = "John Doe";
        Zombie1.buildRunning = 123;
        Zombie1.lastActivity = LocalDateTime.now();
        ZombieService.setZombie(Zombie1);

        ZombieDto.GetZombieDto Zombie = jsonb.fromJson(
            given()
                .when()
                .get("/api/v1/Zombies/{id}", Zombie1.id.toString())
                .then()
                .statusCode(200)
                .and()
                .extract()
                .asString(),
            GetZombieDto.class);

        assertEquals(Zombie1.id.toString(), Zombie.id());

    }

    @Test
    public void testAddZombie() {
        // Creating the second Zombie instance
        NewZombieDto Zombie2 = new NewZombieDto(
            "AA:BB:CC:DD:EE:FF",
            InetAddress.getLoopbackAddress().getHostAddress(),
            "Linux",
            false,
            new HashMap<>(),
            8192,
            4096,
            "AMD Ryzen 7",
            "Jane Smith",
            456);

        var response = given()
            .contentType(ContentType.JSON)
            .body(jsonb.toJson(Zombie2))
            .when()
            .post("/api/v1/Zombies");

        var location = response
            .getHeader("Location");

        response.then().assertThat().statusCode(201);

        assertTrue(location.contains("/api/v1/Zombies/"));
    }

    @Test
    public void testUpdateZombie() {
        List<GetZombieDto> Zombies = jsonb.fromJson(
            given()
            .when()
            .get("/api/v1/Zombies")
            .then()
            .statusCode(200)
            .and()
            .extract()
            .asString(),
            new ArrayList<GetZombieDto>() {
            }.getClass().getGenericSuperclass());

        assertTrue(Zombies.size() > 0);

        var Zombie = Zombies.getFirst();

        var updatedZombieDto = new UpdateZombieDto(Zombie.ipAddress(), false, Zombie.hardDrives(), Zombie.freeRam(), Zombie.usedRam(), 444);
        given()
            .contentType(ContentType.JSON)
            .body(jsonb.toJson(updatedZombieDto))
            .when().put("/api/v1/Zombies/{id}", Zombie.id())
            .then()
            .statusCode(200);
    }

    @Test
    public void testDeleteZombie() {
        // Creating the third Zombie instance
        Zombie Zombie3 = new Zombie();
        Zombie3.id = new ObjectId();
        Zombie3.macAddress = "11:22:33:44:55:66";
        Zombie3.ipAddress = InetAddress.getLoopbackAddress().getHostAddress();
        Zombie3.os = "MacOS";
        Zombie3.runningWithPrivileges = true;

        // Hard drives with free space
        HashMap<String, Integer> harddrives3 = new HashMap<>();
        harddrives3.put("Macintosh HD", 1000);
        Zombie3.harddrivesWithFreeSpace = harddrives3;

        Zombie3.freeRam = 16384;
        Zombie3.usedRam = 8192;
        Zombie3.cpuName = "Apple M1";
        Zombie3.userRunning = "Bob Johnson";
        Zombie3.buildRunning = 789;
        Zombie3.lastActivity = LocalDateTime.now().minusDays(2);

        ZombieService.setZombie(Zombie3);

        given()
            .when().delete("/api/v1/Zombies/{id}", Zombie3.id.toString())
            .then()
            .statusCode(204);
    }
}
