package ch.hftm;

import io.quarkus.test.junit.QuarkusTest;
import io.restassured.http.ContentType;
import jakarta.inject.Inject;

import org.bson.types.ObjectId;
import org.junit.jupiter.api.Test;

import ch.hftm.controls.ComputerService;
import ch.hftm.controls.DTOs.ComputerDto;
import ch.hftm.controls.DTOs.ComputerMapper;
import ch.hftm.controls.DTOs.ComputerDto.GetComputerDto;
import ch.hftm.controls.DTOs.ComputerDto.NewComputerDto;
import ch.hftm.entities.Computer;

import static io.restassured.RestAssured.given;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import jakarta.json.bind.Jsonb;
import jakarta.json.bind.JsonbBuilder;

@QuarkusTest
public class ComputerResourceTest {
    @Inject
    ComputerService computerService;

    @Inject
    ComputerMapper computerMapper;

    Jsonb jsonb = JsonbBuilder.create();

    @Test
    public void testGetAllComputers() throws UnknownHostException {
        // Creating the first Computer instance
        Computer computer1 = new Computer();
        computer1.id = new ObjectId();
        computer1.macAddress = "00:11:22:33:44:55";
        computer1.ipAddress = InetAddress.getLoopbackAddress().getHostAddress();
        computer1.os = "Windows";
        computer1.runningWithPrivileges = true;

        // Hard drives with free space
        Map<String, Integer> harddrives1 = new HashMap<String, Integer>();
        harddrives1.put("C:", 500);
        harddrives1.put("D:", 300);
        computer1.harddrivesWithFreeSpace = harddrives1;

        computer1.freeRam = 4096;
        computer1.usedRam = 2048;
        computer1.cpuName = "Intel Core i5";
        computer1.userRunning = "John Doe";
        computer1.buildRunning = 123;
        computer1.lastActivity = LocalDateTime.now();

        computerService.setComputer(computer1);

        List<Computer> computers = jsonb.fromJson(given()
            .when()
            .get("/api/v1/computers")
            .then()
            .statusCode(200)
            .and()
            .extract()
            .asString(),
            new ArrayList<GetComputerDto>() {
            }.getClass().getGenericSuperclass());

        assertTrue(computers.size() > 0);
    }

    @Test
    public void testGetComputerById() throws UnknownHostException {
        // Creating the first Computer instance
        Computer computer1 = new Computer();
        computer1.id = new ObjectId();
        computer1.macAddress = "00:11:22:33:44:55";
        computer1.ipAddress = InetAddress.getLoopbackAddress().getHostAddress();
        computer1.os = "Windows";
        computer1.runningWithPrivileges = true;

        // Hard drives with free space
        Map<String, Integer> harddrives1 = new HashMap<String, Integer>();
        harddrives1.put("C:", 500);
        harddrives1.put("D:", 300);
        computer1.harddrivesWithFreeSpace = harddrives1;

        computer1.freeRam = 4096;
        computer1.usedRam = 2048;
        computer1.cpuName = "Intel Core i5";
        computer1.userRunning = "John Doe";
        computer1.buildRunning = 123;
        computer1.lastActivity = LocalDateTime.now();
        computerService.setComputer(computer1);

        ComputerDto.GetComputerDto computer = jsonb.fromJson(
            given()
            .when()
            .get("/api/v1/computers/{id}", computer1.id.toString())
            .then()
            .statusCode(200)
            .and()
            .extract()
            .asString(),
            GetComputerDto.class);

        assertEquals(computer1.id.toString(), computer.id());

    }

    @Test
    public void testAddComputer() {
        // Creating the second Computer instance
        NewComputerDto computer2 = new NewComputerDto(
            "AA:BB:CC:DD:EE:FF", 
            InetAddress.getLoopbackAddress().getHostAddress(),
            "Linux",
            false,
            new HashMap<>(),
            8192,
            4096,
            "AMD Ryzen 7",
            "Jane Smith",
            456);

        var response = given()
            .contentType(ContentType.JSON)
            .body(jsonb.toJson(computer2))
            .when()
            .post("/api/v1/computers");
        
        var location = response
            .getHeader("Location");

        response.then().assertThat().statusCode(201);

        assertTrue(location.toString().matches(".+\\/api\\/v1\\/computers\\/\\.+"));
    }

    @Test
    public void testUpdateComputer() {
        given()
                .contentType(ContentType.JSON)
                .body("{ \"ipAddress\": \"127.0.0.1\", \"runningWithPrivileges\": true, \"hardDrives\": {\"C\": 100}, \"freeRam\": 1024, \"usedRam\": 512, \"buildRunning\": 1 }")
                .when().put("/api/v1/computers/{id}", "some-valid-id")
                .then()
                .statusCode(200);
    }

    @Test
    public void testDeleteComputer() {
        // Creating the third Computer instance
        Computer computer3 = new Computer();
        computer3.id = new ObjectId();
        computer3.macAddress = "11:22:33:44:55:66";
        computer3.ipAddress = InetAddress.getLoopbackAddress().getHostAddress();
        computer3.os = "MacOS";
        computer3.runningWithPrivileges = true;

        // Hard drives with free space
        HashMap<String, Integer> harddrives3 = new HashMap<>();
        harddrives3.put("Macintosh HD", 1000);
        computer3.harddrivesWithFreeSpace = harddrives3;

        computer3.freeRam = 16384;
        computer3.usedRam = 8192;
        computer3.cpuName = "Apple M1";
        computer3.userRunning = "Bob Johnson";
        computer3.buildRunning = 789;
        computer3.lastActivity = LocalDateTime.now().minusDays(2);

        computerService.setComputer(computer3);

        given()
            .when().delete("/api/v1/computers/{id}", computer3.id.toString())
            .then()
            .statusCode(204);
    }
}
