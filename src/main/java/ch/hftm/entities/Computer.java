package ch.hftm.entities;

import java.net.InetAddress;
import java.util.Arrays;
import java.util.Dictionary;

public class Computer {
    private byte[] macAddress;
    private InetAddress ipAddress;
    private String os;
    
    private Boolean runningWithPrivileges;
    private Dictionary<String, Integer> harddrivesWithFreeSpace;
    private Integer freeRam;
    private Integer usedRam;
    private String cpuName;
    private String userRunning;
    
    public Computer(byte[] macAddress, InetAddress ipAddress, String os, Boolean runningWithPrivileges,
            Dictionary<String, Integer> harddrivesWithFreeSpace, Integer freeRam, Integer usedRam, String cpuName,
            String userRunning) {
        this.macAddress = macAddress;
        this.ipAddress = ipAddress;
        this.os = os;
        this.runningWithPrivileges = runningWithPrivileges;
        this.harddrivesWithFreeSpace = harddrivesWithFreeSpace;
        this.freeRam = freeRam;
        this.usedRam = usedRam;
        this.cpuName = cpuName;
        this.userRunning = userRunning;
    }

    public Computer() {};
   
    public byte[] getMacAddress() {
        return macAddress;
    }
    public void setMacAddress(byte[] macAddress) {
        this.macAddress = macAddress;
    }
    public InetAddress getIpAddress() {
        return ipAddress;
    }
    public void setIpAddress(InetAddress ipAddress) {
        this.ipAddress = ipAddress;
    }
    public String getOs() {
        return os;
    }
    public void setOs(String os) {
        this.os = os;
    }
    public Boolean getRunningWithPrivileges() {
        return runningWithPrivileges;
    }
    public void setRunningWithPrivileges(Boolean runningWithPrivileges) {
        this.runningWithPrivileges = runningWithPrivileges;
    }
    public Dictionary<String, Integer> getHarddrivesWithFreeSpace() {
        return harddrivesWithFreeSpace;
    }
    public void setHarddrivesWithFreeSpace(Dictionary<String, Integer> harddrivesWithFreeSpace) {
        this.harddrivesWithFreeSpace = harddrivesWithFreeSpace;
    }
    public Integer getFreeRam() {
        return freeRam;
    }
    public void setFreeRam(Integer freeRam) {
        this.freeRam = freeRam;
    }
    public Integer getUsedRam() {
        return usedRam;
    }
    public void setUsedRam(Integer usedRam) {
        this.usedRam = usedRam;
    }
    public String getCpuName() {
        return cpuName;
    }
    public void setCpuName(String cpuName) {
        this.cpuName = cpuName;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + Arrays.hashCode(macAddress);
        result = prime * result + ((os == null) ? 0 : os.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Computer other = (Computer) obj;
        if (!Arrays.equals(macAddress, other.macAddress))
            return false;
        if (os == null) {
            if (other.os != null)
                return false;
        } else if (!os.equals(other.os))
            return false;
        return true;
    }

    public String getUserRunning() {
        return userRunning;
    }

    public void setUserRunning(String userRunning) {
        this.userRunning = userRunning;
    }
}
