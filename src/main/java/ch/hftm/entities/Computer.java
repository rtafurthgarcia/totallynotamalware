package ch.hftm.entities;

import java.net.InetAddress;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.Dictionary;

import org.bson.types.ObjectId;

import io.quarkus.mongodb.panache.common.MongoEntity;

@MongoEntity(collection="Computer")
public class Computer {
    private ObjectId id;

    private String macAddress;
    private InetAddress ipAddress;
    private String os;
    
    private Boolean runningWithPrivileges;
    private Dictionary<String, Integer> harddrivesWithFreeSpace;
    private Integer freeRam;
    private Integer usedRam;
    private String cpuName;
    private String userRunning;

    private Integer buildRunning;
    private LocalDate lastActivity;
    
    public Computer() {};
    
    public Integer getBuildRunning() {
        return buildRunning;
    }

    public void setBuildRunning(Integer buildRunning) {
        this.buildRunning = buildRunning;
    }

    public LocalDate getLastActivity() {
        return lastActivity;
    }

    public void setLastActivity(LocalDate lastActivity) {
        this.lastActivity = lastActivity;
    }

   
    public String getMacAddress() {
        return macAddress;
    }
    public Computer setMacAddress(String macAddress) {
        this.macAddress = macAddress;

        return this;
    }
    public InetAddress getIpAddress() {
        return ipAddress;
    }
    public Computer setIpAddress(InetAddress ipAddress) {
        this.ipAddress = ipAddress;
        return this;
    }
    public String getOs() {
        return os;
    }
    public Computer setOs(String os) {
        this.os = os;
        return this;
    }
    public Boolean getRunningWithPrivileges() {
        return runningWithPrivileges;
    }
    public Computer setRunningWithPrivileges(Boolean runningWithPrivileges) {
        this.runningWithPrivileges = runningWithPrivileges;

        return this;
    }
    public Dictionary<String, Integer> getHarddrivesWithFreeSpace() {
        return harddrivesWithFreeSpace;
    }
    public Computer setHarddrivesWithFreeSpace(Dictionary<String, Integer> harddrivesWithFreeSpace) {
        this.harddrivesWithFreeSpace = harddrivesWithFreeSpace;

        return this;
    }
    public Integer getFreeRam() {
        return freeRam;
    }
    public Computer setFreeRam(Integer freeRam) {
        this.freeRam = freeRam;

        return this;
    }
    public Integer getUsedRam() {
        return usedRam;
    }
    public Computer setUsedRam(Integer usedRam) {
        this.usedRam = usedRam;

        return this;
    }
    public String getCpuName() {
        return cpuName;
    }
    public Computer setCpuName(String cpuName) {
        this.cpuName = cpuName;

        return this;
    }
    
    public String getUserRunning() {
        return userRunning;
    }

    public Computer setUserRunning(String userRunning) {
        this.userRunning = userRunning;

        return this;
    }

    public ObjectId getId() {
        return id;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((macAddress == null) ? 0 : macAddress.hashCode());
        result = prime * result + ((os == null) ? 0 : os.hashCode());
        result = prime * result + ((userRunning == null) ? 0 : userRunning.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Computer other = (Computer) obj;
        if (macAddress == null) {
            if (other.macAddress != null)
                return false;
        } else if (!macAddress.equals(other.macAddress))
            return false;
        if (os == null) {
            if (other.os != null)
                return false;
        } else if (!os.equals(other.os))
            return false;
        if (userRunning == null) {
            if (other.userRunning != null)
                return false;
        } else if (!userRunning.equals(other.userRunning))
            return false;
        return true;
    }
}
