package ch.hftm.resources;

import org.bson.types.ObjectId;

import ch.hftm.controls.UserService;
import ch.hftm.controls.ZombieService;
import ch.hftm.controls.dto.UserDto.NewUserDto;
import ch.hftm.controls.dto.UserMapper;
import ch.hftm.controls.dto.ZombieMapper;
import ch.hftm.entities.User;
import jakarta.annotation.security.RolesAllowed;
import jakarta.inject.Inject;
import jakarta.transaction.Transactional;
import jakarta.validation.Valid;
import jakarta.ws.rs.Consumes;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.PUT;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.Context;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;
import jakarta.ws.rs.core.UriInfo;

@Path("/api/v1/users")
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
public class UserResource {
    @Inject private UserService userService;
    @Inject private UserMapper userMapper;

    @POST
    @RolesAllowed("admin")
    @Transactional
    public Response addUser(@Valid NewUserDto newUserDto, @Context UriInfo uriInfo) {
        User user = userMapper.toNewUser(newUserDto);
        userService.setUser(user);
        var uri = uriInfo.getAbsolutePathBuilder().path(user.id.toString()).build(); 
        return Response.created(uri).build();
    }

    @PUT
    @RolesAllowed("admin")
    @Path("/{id}/password")
    @Transactional
    public Response updateZombie(@PathParam("id") String id, String newPassword) {
        ObjectId objectId = new ObjectId(id);
        //Zombie existingZombie = ZombieService.getById(objectId);
        User exisitingUser = userService.getById(objectId);

        if (exisitingUser != null) {
            exisitingUser.password = newPassword;
            userService.setUser(exisitingUser);
            return Response.ok().build();
        } else {
            return Response.status(Response.Status.NOT_FOUND).build();
        }
    }

    @PUT
    @RolesAllowed("admin")
    @Path("/{id}/roles")
    @Transactional
    public Response updateRoles(@PathParam("id") String id, String newRoles) {
        ObjectId objectId = new ObjectId(id);
        //Zombie existingZombie = ZombieService.getById(objectId);
        User exisitingUser = userService.getById(objectId);

        if (exisitingUser != null) {
            exisitingUser.role = newRoles;
            userService.setUser(exisitingUser);
            return Response.ok().build();
        } else {
            return Response.status(Response.Status.NOT_FOUND).build();
        }
    }
}
