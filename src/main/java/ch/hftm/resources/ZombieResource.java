package ch.hftm.resources;

import ch.hftm.controls.UserService;
import ch.hftm.controls.ZombieService;
import ch.hftm.controls.dto.ZombieMapper;
import ch.hftm.controls.dto.ZombieDto.GetZombieDto;
import ch.hftm.controls.dto.ZombieDto.NewZombieDto;
import ch.hftm.controls.dto.ZombieDto.UpdateZombieDto;
import ch.hftm.entities.User;
import ch.hftm.entities.Zombie;
import io.quarkus.security.identity.SecurityIdentity;
import jakarta.validation.Valid;
import jakarta.annotation.security.RolesAllowed;
import jakarta.inject.Inject;
import jakarta.transaction.Transactional;
import jakarta.ws.rs.Consumes;
import jakarta.ws.rs.DELETE;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.PUT;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.Context;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;
import jakarta.ws.rs.core.UriInfo;
import jakarta.ws.rs.core.Response.Status;

import org.bson.types.ObjectId;

@Path("/api/v1/Zombies")
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
public class ZombieResource {

    @Inject private ZombieService zombieService;
    @Inject private ZombieMapper zombieMapper;
    @Inject private SecurityIdentity securityIdentity;
    @Inject private UserService userService;

    @GET
    @RolesAllowed("admin")
    public Response getAllZombies() {
        return Response
        .ok()
        .entity(
            this.zombieService
                .getAllZombies()
                .stream()
                .map(zombieMapper::toGetZombieDto)
                .toList())
                .build();
    }

    @GET
    @RolesAllowed("admin")
    @Path("/{id}")
    public Response getZombieById(@PathParam("id") String id) {
        Zombie zombie = zombieService.getById(new ObjectId(id));
        if (zombie != null) {
            GetZombieDto zombieDto = zombieMapper.toGetZombieDto(zombie);
            return Response.ok(zombieDto).build();
        } else {
            return Response.status(Response.Status.NOT_FOUND).build();
        }
    }

    @POST
    @Transactional
    public Response addZombie(@Valid NewZombieDto newZombieDto, @Context UriInfo uriInfo) {
        Zombie zombie = zombieMapper.fromNewZombieDto(newZombieDto);
        zombieService.setZombie(zombie);
        var uri = uriInfo.getAbsolutePathBuilder().path(zombie.id.toString()).build(); 
        return Response.created(uri).build();
    }
    
    @PUT
    @Path("/{id}")
    @Transactional
    public Response updateZombie(@PathParam("id") String id, @Valid UpdateZombieDto updateZombieDto) {
        User user = userService.getByName(securityIdentity.getPrincipal().getName());
        ObjectId objectId = new ObjectId(id);
        Zombie existingZombie = zombieService.getById(objectId);

        if (existingZombie != null) {
            if (! existingZombie.relatedUser.equals(user)) {
                return Response.status(Status.UNAUTHORIZED).build();
            }

            Zombie updatedZombie = zombieMapper.fromUpdateZombieDto(existingZombie, updateZombieDto);
            zombieService.setZombie(updatedZombie);
            return Response.ok().build();
        } else {
            return Response.status(Response.Status.NOT_FOUND).build();
        }
    }

    @DELETE
    @RolesAllowed("admin")
    @Path("/{id}")
    @Transactional
    public Response deleteZombie(@PathParam("id") String id) {
        User user = userService.getByName(securityIdentity.getPrincipal().getName());

        ObjectId objectId = new ObjectId(id);
        Zombie existingZombie = zombieService.getById(objectId);

        if (existingZombie != null) {
            zombieService.deleteZombie(existingZombie);
            return Response.noContent().build();
        } else {
            return Response.status(Response.Status.NOT_FOUND).build();
        }
    }
}
