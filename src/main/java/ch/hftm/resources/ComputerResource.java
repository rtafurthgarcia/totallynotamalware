package ch.hftm.resources;

import java.net.UnknownHostException;
import java.util.List;
import java.util.stream.Collectors;

import ch.hftm.controls.ComputerService;
import ch.hftm.controls.DTOs.ComputerDto;
import ch.hftm.controls.DTOs.ComputerDto.GetComputerDto;
import ch.hftm.controls.DTOs.ComputerDto.NewComputerDto;
import ch.hftm.controls.DTOs.ComputerDto.UpdateComputerDto;
import ch.hftm.controls.DTOs.ComputerMapper;
import ch.hftm.entities.Computer;
import jakarta.transaction.Transactional;
import jakarta.ws.rs.Consumes;
import jakarta.ws.rs.DELETE;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.PUT;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;

import org.bson.types.ObjectId;

@Path("/computers")
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
public class ComputerResource {

    private final ComputerService computerService;
    private final ComputerMapper computerMapper;

    public ComputerResource(ComputerService computerService, ComputerMapper computerMapper) {
        this.computerService = computerService;
        this.computerMapper = computerMapper;
    }

    @GET
    public List<GetComputerDto> getAllComputers() {
        List<Computer> computers = computerService.getAllComputers();
        return computers.stream()
                .map(computerMapper::toGetComputerDto)
                .collect(Collectors.toList());
    }

    @GET
    @Path("/{id}")
    public Response getComputerById(@PathParam("id") String id) {
        Computer computer = computerService.getById(new ObjectId(id));
        if (computer != null) {
            GetComputerDto computerDto = computerMapper.toGetComputerDto(computer);
            return Response.ok(computerDto).build();
        } else {
            return Response.status(Response.Status.NOT_FOUND).build();
        }
    }

    @POST
    @Transactional
    public Response addComputer(NewComputerDto newComputerDto) throws UnknownHostException {
        Computer computer = computerMapper.fromNewComputerDto(newComputerDto);
        computerService.setComputer(computer);
        return Response.status(Response.Status.CREATED).build();
    }

    @PUT
    @Path("/{id}")
    @Transactional
    public Response updateComputer(@PathParam("id") String id, UpdateComputerDto updateComputerDto) throws UnknownHostException {
        ObjectId objectId = new ObjectId(id);
        Computer existingComputer = computerService.getById(objectId);

        if (existingComputer != null) {
            Computer updatedComputer = computerMapper.fromUpdateComputerDto(existingComputer, updateComputerDto);
            computerService.setComputer(updatedComputer);
            return Response.ok().build();
        } else {
            return Response.status(Response.Status.NOT_FOUND).build();
        }
    }

    @DELETE
    @Path("/{id}")
    @Transactional
    public Response deleteComputer(@PathParam("id") String id) {
        ObjectId objectId = new ObjectId(id);
        Computer existingComputer = computerService.getById(objectId);

        if (existingComputer != null) {
            computerService.deleteComputer(existingComputer);
            return Response.noContent().build();
        } else {
            return Response.status(Response.Status.NOT_FOUND).build();
        }
    }
}
